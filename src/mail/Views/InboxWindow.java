/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mail.Views;

import java.awt.Color;
import java.awt.Component;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.util.ArrayList;
import java.util.Date;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import mail.Mensaje;
import mail.MensajeComun;
import mail.Sistema;
import mail.Usuario;
import mail.UsuarioComponente;

/**
 *
 * @author juliansantaana
 */
public class InboxWindow extends javax.swing.JFrame {

    /**
     * Creates new form InboxWindow
     */
    
    private enum MESSAGES_ORDER_BY{
        DATE, 
        CONVERSATION, 
    }
    
    private MESSAGES_ORDER_BY messagesOrderBy = MESSAGES_ORDER_BY.DATE;
    
    public InboxWindow() {
        initComponents();
        
        tblMessages.removeColumn(tblMessages.getColumnModel().getColumn(3));
        
        tblMessages.getColumnModel().getColumn(0).setCellRenderer(new ReadRenderer());
        
        tblMessages.addMouseListener(new TableDoubleClickListener());
        
        //refreshMessageList();
    }
    
    public class TableDoubleClickListener extends MouseAdapter{
        public void mousePressed(MouseEvent me) {
            JTable table =(JTable) me.getSource();
            Point p = me.getPoint();
            int row = table.rowAtPoint(p);
            if (me.getClickCount() == 2) {
                // your valueChanged overridden method 
                //JOptionPane.showMessageDialog(null, tblMessages.getModel().getValueAt(row, 3)); 
                messageDblClicked((int) tblMessages.getModel().getValueAt(row, 3));
            }
        }
    }
    
    public void messageDblClicked(int id){
        openMessage(id);
    }
    
    public void openMessage(int id){
        Mensaje msg = Sistema.getInstance().getCurrentUser().getMensaje(id);
        openMessage(msg, null);
    }
    
    public void openMessage(Mensaje msg){
        openMessage(msg, null);
    }
    
    public void openMessage(Mensaje msg, WindowAdapter wa){
        ViewMailWindow vmw = new ViewMailWindow(msg);
        
        if (wa != null){
            vmw.addWindowListener(wa);
        }
        
        vmw.setVisible(true);
        
        //letting the state know that the message has been opened
        //the state will be in charge of setting the object in the new read state
        msg.getReadState().openMessage(msg);
    }
    
    public class ReadRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column); 
            int messageid = (int) table.getModel().getValueAt(row, 3);
            Mensaje msg = Sistema.getInstance().getCurrentUser().getMensaje(messageid);
            Boolean read = msg.getReadState().isRead();
            // You'll need some way to supply the filter value, may via a centralised 
            // manager of some kind.
            if (read == false) {
                comp.setForeground(Color.BLACK);
                comp.setBackground(Color.YELLOW);
            }else{
                comp.setForeground(Color.BLACK);
                comp.setBackground(Color.WHITE);
            }
            return comp;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtSearchQuery = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        cmbSearchMode = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMessages = new javax.swing.JTable(){
            private static final long serialVersionUID = 1L;
            public boolean isCellEditable(int row, int column){
                return false;
            };
        };
        btnComposeMail = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnRefresh = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        btnDelete = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        btnComposeMail1 = new javax.swing.JButton();
        cmbOrderBy = new javax.swing.JComboBox();
        lblOrderBy = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtSearchQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchQueryActionPerformed(evt);
            }
        });

        btnSearch.setText("Buscar");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        cmbSearchMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cuerpo", "Asunto", "Destinatario", "Fecha" }));

        tblMessages.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "De", "Asunto", "Fecha/Hora", "id"
            }
        ));
        tblMessages.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblMessages.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblMessages);

        btnComposeMail.setText("Nuevo Mensaje");
        btnComposeMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComposeMailActionPerformed(evt);
            }
        });

        btnRefresh.setText("Actualizar");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnDelete.setText("Eliminar");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnLogout.setText("Cerrar Sesi√≥n");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        btnComposeMail1.setText("Nuevo Recordatorio");
        btnComposeMail1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComposeMail1ActionPerformed(evt);
            }
        });

        cmbOrderBy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fecha", "Conversacion" }));
        cmbOrderBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOrderByActionPerformed(evt);
            }
        });

        lblOrderBy.setText("Ordernar por:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnRefresh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnComposeMail, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnComposeMail1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 1, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                                    .addComponent(cmbOrderBy, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(lblOrderBy)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtSearchQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbSearchMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(cmbSearchMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnComposeMail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(28, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnComposeMail1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(btnRefresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)
                        .addGap(33, 33, 33)
                        .addComponent(lblOrderBy)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbOrderBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLogout))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchQueryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchQueryActionPerformed

    private void btnComposeMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComposeMailActionPerformed
        // TODO add your handling code here:
        ComposeMailWindow composeWindow = new ComposeMailWindow();
        composeWindow.setVisible(true);
    }//GEN-LAST:event_btnComposeMailActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        refreshMessageList();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int messageid = (Integer) tblMessages.getModel().getValueAt(tblMessages.getSelectedRow(), 3);
        Mensaje msg = Sistema.getInstance().getCurrentUser().getMensaje(messageid);
        deleteMessage(msg);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        Usuario.FIND_MODE mode = Usuario.FIND_MODE.BODY;
        switch(cmbSearchMode.getSelectedItem().toString().toUpperCase()){
            case "CUERPO":
                mode = Usuario.FIND_MODE.BODY;
                break;
            case "ASUNTO":
                mode = Usuario.FIND_MODE.SUBJECT;
                break;
            case "DESTINATARIO":
                mode = Usuario.FIND_MODE.TO;
                break;
            case "FECHA":
                mode = Usuario.FIND_MODE.DATE;
                break;
        }
        
        ArrayList<Mensaje> messages = Sistema.getInstance().getCurrentUser().findMessages(mode, txtSearchQuery.getText());
        fillMessageList(messages);
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        Sistema.getInstance().setCurrentUser(null);
        
        MainWindow mw = new MainWindow();
        mw.setVisible(true);
        
        this.dispose();
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnComposeMail1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComposeMail1ActionPerformed
        ComposeMailWindow cmw = new ComposeMailWindow(ComposeMailWindow.COMPOSE_MODE.REMINDER);
        cmw.setVisible(true);
    }//GEN-LAST:event_btnComposeMail1ActionPerformed

    private void cmbOrderByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrderByActionPerformed
        switch(cmbOrderBy.getSelectedItem().toString().toUpperCase()){
            case "FECHA":
                this.messagesOrderBy = MESSAGES_ORDER_BY.DATE;
                break;
            case "CONVERSACION":
                this.messagesOrderBy = MESSAGES_ORDER_BY.CONVERSATION;
                break;
        }
    }//GEN-LAST:event_cmbOrderByActionPerformed
    
    public void refreshMessageList(){
        Usuario user = Sistema.getInstance().getCurrentUser();
        ArrayList<Mensaje> messages = new ArrayList<>();
        
        for (Mensaje m : user.getMensajes()){
            messages.add(m);
        }
        
        if (this.messagesOrderBy == MESSAGES_ORDER_BY.CONVERSATION){
            ArrayList<Mensaje> messagesOrdered = new ArrayList<>();
            while (messages.size() > 0){
                Mensaje msg = messages.get(0);
                messagesOrdered.add(msg);
                messages.remove(msg);
                while (msg.getReplyTo() != null){
                    Mensaje replyTo = msg.getReplyTo();
                    Boolean found = false;
                    
                    for (Mensaje m : messages){
                        if (Objects.equals(m.getId(), replyTo.getId())){
                            msg = m;
                            found = true;
                            break;
                        }
                    }
                    
                    if (found == true){
                        messagesOrdered.add(msg);
                        messages.remove(msg);
                    }else{
                        msg = replyTo;
                    }
                }
            }
            
            messages.addAll(messagesOrdered);
        }
        
        fillMessageList(messages);
        
        //checking if there's any urgent message
        for (Mensaje msg : messages){
            if (msg.isUrgent() && !msg.getReadState().isRead()){
                openMessage(msg, new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                        sendReadNotification(msg);
                    }
                });
            }
        }
    }
    
    private void deleteMessage(Mensaje msg){
        if (msg.canDelete()){
            try {
                Sistema.getInstance().getCurrentUser().deleteMessage(msg);
            } catch (Exception ex) {
                Logger.getLogger(InboxWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            refreshMessageList();
        }else{
            JOptionPane.showMessageDialog(null, "El mensaje no puede ser eliminado sin ser leido antes. "
                    + "Se abrira automaticamente el mensaje para su lectura y sera eliminado autom√°ticamente "
                    + "luego de ser cerrada la ventana.");
            
            openMessage(msg, new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                    deleteMessage(msg);
                }
            });
        }
    }
    
    private void sendReadNotification(Mensaje msg){
        MensajeComun notification = new MensajeComun();
        notification.setRemitente(Sistema.getInstance().getCurrentUser());
        
        ArrayList<UsuarioComponente> destinatarios = new ArrayList<>();
        destinatarios.add(msg.getRemitente());
        notification.setDestinatarios(destinatarios);
        
        notification.setAsunto("Aviso Lectura: " + msg.getAsunto());
        notification.setCuerpo("Este es un aviso de lectura, el mail con asunto: [ " + msg.getAsunto() + " ] ha sido leido.");
        notification.setCategoria(msg.getCategoria());
        
        Sistema.getInstance().getCurrentUser().sendEmail(notification);
    }
    
    private void fillMessageList(ArrayList<Mensaje> messages){
        DefaultTableModel model = ((DefaultTableModel)tblMessages.getModel());
        
        model.setRowCount(0);
        for (Mensaje m : messages){
            String remitente = m.getRemitente().getNick();
            String subject = m.getAsunto();
            Date d = m.getDatetime();
            Integer id = m.getId();
            
            model.addRow(new Object[]{ remitente, subject, d.toString(), id });
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InboxWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InboxWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InboxWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InboxWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InboxWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnComposeMail;
    private javax.swing.JButton btnComposeMail1;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox cmbOrderBy;
    private javax.swing.JComboBox cmbSearchMode;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblOrderBy;
    private javax.swing.JTable tblMessages;
    private javax.swing.JTextField txtSearchQuery;
    // End of variables declaration//GEN-END:variables
}
